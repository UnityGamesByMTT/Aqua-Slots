name: Unity WebGL Automatic Build ðŸ‘½âœ¨ðŸš€
on:
  pull_request:
    branches:    
      - 'Develop'
  workflow_dispatch:
permissions:
  contents: write  # Allow write access to the contents.
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: false
jobs:
  build:
    name: Unity Build ðŸ‘½
    runs-on: ubuntu-latest
    steps:
      # Checkout (without LFS)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      # Git LFS
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: WebGL 
          buildsPath: ${{ vars.BUILD_PATH }}
          allowDirtyBuild: true

      # Output: Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ vars.ARTIFACT_NAME }}
          path: ${{ vars.BUILD_PATH }}

      # Deployment
      - name: Stash build result and reset local changes
        run: |
          echo "Applying initial configs"
          sudo chown -R $USER:$USER ${{ vars.BUILD_PATH }}
          git config --global user.email "${{ secrets.GH_EMAIL }}"
          git config --global user.name "${{ secrets.GH_USERNAME }}"
          echo "Stash and reset"
          git checkout -b build-artifacts
          git add -f ${{ vars.BUILD_PATH }}
          git config advice.addIgnoredFile false
          git commit -m 'added: build artifacts'
          git push --set-upstream origin build-artifacts
          
      - name: Verify Branch Creation
        run: git branch -a

  create_pull_request:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      pull_request_number: ${{ steps.create_pr.outputs.pull-request-number }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create Pull Request
        id: create_pr
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT }}  # Use PAT here instead of GITHUB_TOKEN
          commit-message: "added: build artifacts"
          branch: build-artifacts
          base: DevBuild
          title: "Add build artifacts"
          body: "This pull request contains the build artifacts."
          labels: "auto-approve"
      
  merge_pull_request:
    needs: create_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Merge Pull Request
        run: |
          PR_NUMBER="${{ needs.create_pull_request.outputs.pull_request_number }}"
          curl -X PUT \
            -H "Authorization: token ${{ secrets.G_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/merge
  cleanup:
    if: ${{ always() }}
    needs: [merge_pull_request, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Delete Build Artifacts Branch
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
        run: |
          git push origin --delete build-artifacts
             rm -rf ${{ vars.BUILD_PATH }}
